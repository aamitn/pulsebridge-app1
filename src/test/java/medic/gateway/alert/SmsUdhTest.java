package medic.gateway.alert;

import android.telephony.SmsMessage;

import org.junit.*;
import org.junit.runner.*;
import org.robolectric.*;
import org.robolectric.annotation.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(RobolectricTestRunner.class)
@Config(sdk=26)
public class SmsUdhTest {
	@Test
	public void from_shouldDecodePdu_1() {
		// given
		byte[] pdu = { (byte) 0x08, (byte) 0x91, (byte) 0x79, (byte) 0x97, (byte) 0x58, (byte) 0x01, (byte) 0x82, (byte) 0x08, (byte) 0xf1, (byte) 0x44, (byte) 0x0d, (byte) 0x91, (byte) 0x79, (byte) 0x97, (byte) 0x68, (byte) 0x90, (byte) 0x11, (byte) 0x11, (byte) 0xf1, (byte) 0x00, (byte) 0x00, (byte) 0x71, (byte) 0x90, (byte) 0x51, (byte) 0x41, (byte) 0x54, (byte) 0x84, (byte) 0x32, (byte) 0xa0, (byte) 0x05, (byte) 0x00, (byte) 0x03, (byte) 0xe6, (byte) 0x03, (byte) 0x01, (byte) 0xa8, (byte) 0xe5, (byte) 0x39, (byte) 0x9d, (byte) 0x5e, (byte) 0x26, (byte) 0x9f, (byte) 0xcf, (byte) 0x68, (byte) 0x34, (byte) 0x7a, (byte) 0xad, (byte) 0xb6, (byte) 0xdb, (byte) 0xd5, (byte) 0xe7, (byte) 0xb3, (byte) 0x5a, (byte) 0x7d, (byte) 0x46, (byte) 0xab, (byte) 0xc5, (byte) 0x76, (byte) 0xb4, (byte) 0x5a, (byte) 0x2d, (byte) 0x16, (byte) 0x8b, (byte) 0xc7, (byte) 0xea, (byte) 0xb3, (byte) 0x19, (byte) 0x8d, (byte) 0x3e, (byte) 0xab, (byte) 0xcf, (byte) 0x76, (byte) 0xbb, (byte) 0x18, (byte) 0x8d, (byte) 0x46, (byte) 0x8b, (byte) 0x41, (byte) 0x6a, (byte) 0x3b, (byte) 0x7a, (byte) 0x8d, (byte) 0x46, (byte) 0xa3, (byte) 0xd1, (byte) 0x68, (byte) 0x34, (byte) 0x1a, (byte) 0xad, (byte) 0x46, (byte) 0xa3, (byte) 0x5d, (byte) 0x20, (byte) 0x21, (byte) 0xfa, (byte) 0x6c, (byte) 0x56, (byte) 0xa3, (byte) 0xc5, (byte) 0x62, (byte) 0xb4, (byte) 0x5a, (byte) 0xad, (byte) 0x46, (byte) 0xa3, (byte) 0x41, (byte) 0xe8, (byte) 0xb3, (byte) 0x19, (byte) 0xad, (byte) 0x46, (byte) 0x9b, (byte) 0xd1, (byte) 0x68, (byte) 0x34, (byte) 0x5a, (byte) 0xad, (byte) 0x56, (byte) 0xab, (byte) 0xd5, (byte) 0xea, (byte) 0xf5, (byte) 0x9a, (byte) 0x2c, (byte) 0x37, (byte) 0x87, (byte) 0xd5, (byte) 0x69, (byte) 0x90, (byte) 0x9a, (byte) 0xac, (byte) 0x26, (byte) 0xa3, (byte) 0xc9, (byte) 0x67, (byte) 0xb3, (byte) 0x59, (byte) 0x8d, (byte) 0x3e, (byte) 0xaf, (byte) 0xd5, (byte) 0x6b, (byte) 0x36, (byte) 0x1b, (byte) 0xb4, (byte) 0x3e, (byte) 0x9b, (byte) 0xd9, (byte) 0x67, (byte) 0xf3, (byte) 0x19, (byte) 0x44, (byte) 0x2d, (byte) 0xcf, (byte) 0xe9, (byte) 0xf4, (byte) 0x32, (byte) 0xf9, (byte) 0x7c, (byte) 0x46, (byte) 0xa3, (byte) 0xd1, (byte) 0x6b, (byte) 0xb5, (byte) 0xdd, (byte) 0xae, (byte) 0x3e, (byte) 0x9f, (byte) 0xd5 };

		// when
		SmsUdh udh = SmsUdh.from(anSmsWith(pdu));

		// then
		assertNotNull(udh);
		assertEquals(230, udh.multipartRef);
		assertEquals(1, udh.partNumber);
		assertEquals(3, udh.totalParts);
		assertEquals(0, udh.sentTimestamp);
	}

	@Test
	public void from_shouldDecodePdu_2() {
		// given
		byte[] pdu = { (byte) 0x07, (byte) 0x91, (byte) 0x44, (byte) 0x77, (byte) 0x28, (byte) 0x00, (byte) 0x80, (byte) 0x00, (byte) 0x04, (byte) 0x0c, (byte) 0x91, (byte) 0x44, (byte) 0x87, (byte) 0x09, (byte) 0x21, (byte) 0x43, (byte) 0x65, (byte) 0x00, (byte) 0x00, (byte) 0x90, (byte) 0x20, (byte) 0x11, (byte) 0x31, (byte) 0x74, (byte) 0x63, (byte) 0x00, (byte) 0x23, (byte) 0xc7, (byte) 0xf7, (byte) 0x9b, (byte) 0x0c, (byte) 0x32, (byte) 0xbf, (byte) 0xe5, (byte) 0xa0, (byte) 0xfc, (byte) 0xbb, (byte) 0xee, (byte) 0x02, (byte) 0x4d, (byte) 0xd9, (byte) 0x61, (byte) 0x38, (byte) 0xe8, (byte) 0xed, (byte) 0x06, (byte) 0xd1, (byte) 0xd1, (byte) 0x65, (byte) 0x90, (byte) 0x38, (byte) 0x3c, (byte) 0x5e, (byte) 0x83, (byte) 0xca, (byte) 0xf4, (byte) 0xb1, (byte) 0x0b };

		// when
		SmsUdh udh = SmsUdh.from(anSmsWith(pdu));

		// then
		assertNull(udh);
	}

	@Test
	public void from_shouldDecodePdu_3() {
		// given
		byte[] pdu = { (byte) 0x07, (byte) 0x91, (byte) 0x44, (byte) 0x77, (byte) 0x28, (byte) 0x00, (byte) 0x80, (byte) 0x00, (byte) 0x04, (byte) 0x0c, (byte) 0x91, (byte) 0x44, (byte) 0x87, (byte) 0x09, (byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x00, (byte) 0x00, (byte) 0x90, (byte) 0x20, (byte) 0x11, (byte) 0x31, (byte) 0x74, (byte) 0x63, (byte) 0x00, (byte) 0x23, (byte) 0xc7, (byte) 0xf7, (byte) 0x9b, (byte) 0x0c, (byte) 0x32, (byte) 0xbf, (byte) 0xe5, (byte) 0xa0, (byte) 0xfc, (byte) 0xbb, (byte) 0xee, (byte) 0x02, (byte) 0x4d, (byte) 0xd9, (byte) 0x61, (byte) 0x38, (byte) 0xe8, (byte) 0xed, (byte) 0x06, (byte) 0xd1, (byte) 0xd1, (byte) 0x65, (byte) 0x90, (byte) 0x38, (byte) 0x3c, (byte) 0x5e, (byte) 0x83, (byte) 0xca, (byte) 0xf4, (byte) 0xb1, (byte) 0x0b };

		// when
		SmsUdh udh = SmsUdh.from(anSmsWith(pdu));

		// then
		assertNull(udh);
	}

	@Test
	public void from_shouldDecodePdu_4() {
		// given
		byte[] pdu = { (byte) 0x07, (byte) 0x91, (byte) 0x44, (byte) 0x97, (byte) 0x37, (byte) 0x01, (byte) 0x90, (byte) 0x37, (byte) 0x64, (byte) 0x0C, (byte) 0x91, (byte) 0x44, (byte) 0x87, (byte) 0x09, (byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x00, (byte) 0x00, (byte) 0x90, (byte) 0x20, (byte) 0x11, (byte) 0x71, (byte) 0x85, (byte) 0x31, (byte) 0x00, (byte) 0xA0, (byte) 0x06, (byte) 0x08, (byte) 0x04, (byte) 0xB9, (byte) 0xDB, (byte) 0x02, (byte) 0x01, (byte) 0xC8, (byte) 0xB2, (byte) 0xBC, (byte) 0x0C, (byte) 0x4A, (byte) 0xCF, (byte) 0x41, (byte) 0x61, (byte) 0x90, (byte) 0xBD, (byte) 0x2C, (byte) 0xCF, (byte) 0x83, (byte) 0xEC, (byte) 0x65, (byte) 0x79, (byte) 0x1E, (byte) 0x64, (byte) 0x2F, (byte) 0xCB, (byte) 0xF3, (byte) 0x20, (byte) 0x7B, (byte) 0x59, (byte) 0x9E, (byte) 0x07, (byte) 0xD9, (byte) 0xCB, (byte) 0xF2, (byte) 0x3C, (byte) 0xC8, (byte) 0x5E, (byte) 0x96, (byte) 0xE7, (byte) 0x41, (byte) 0xF6, (byte) 0xB2, (byte) 0x3C, (byte) 0x0F, (byte) 0xB2, (byte) 0x97, (byte) 0xE5, (byte) 0x79, (byte) 0x90, (byte) 0xBD, (byte) 0x2C, (byte) 0xCF, (byte) 0x83, (byte) 0xEC, (byte) 0x65, (byte) 0x79, (byte) 0x1E, (byte) 0x64, (byte) 0x2F, (byte) 0xCB, (byte) 0xF3, (byte) 0x20, (byte) 0x7B, (byte) 0x59, (byte) 0x9E, (byte) 0x07, (byte) 0xD9, (byte) 0xCB, (byte) 0xF2, (byte) 0x3C, (byte) 0xC8, (byte) 0x5E, (byte) 0x96, (byte) 0xE7, (byte) 0x41, (byte) 0xF6, (byte) 0xB2, (byte) 0x3C, (byte) 0x0F, (byte) 0xB2, (byte) 0x97, (byte) 0xE5, (byte) 0x79, (byte) 0x90, (byte) 0xBD, (byte) 0x2C, (byte) 0xCF, (byte) 0x83, (byte) 0xEC, (byte) 0x65, (byte) 0x79, (byte) 0x1E, (byte) 0xC4, (byte) 0x7E, (byte) 0xBB, (byte) 0xCF, (byte) 0xA0, (byte) 0x76, (byte) 0x79, (byte) 0x3E, (byte) 0x0F, (byte) 0x9F, (byte) 0xCB, (byte) 0xA0, (byte) 0x3B, (byte) 0x3A, (byte) 0x3D, (byte) 0x46, (byte) 0x83, (byte) 0xC2, (byte) 0x63, (byte) 0x7A, (byte) 0x3D, (byte) 0xCC, (byte) 0x66, (byte) 0xE7, (byte) 0x41, (byte) 0x73, (byte) 0x78, (byte) 0xD8, (byte) 0x3D, (byte) 0x07, (byte) 0xD1, (byte) 0xEF, (byte) 0x6F, (byte) 0xD0, (byte) 0x9B, (byte) 0x8E, (byte) 0x2E, (byte) 0xCB, (byte) 0x41, (byte) 0xED, (byte) 0xF2, (byte) 0x7C, (byte) 0x1E, (byte) 0x3E, (byte) 0x97, (byte) 0xE7 };

		// when
		SmsUdh udh = SmsUdh.from(anSmsWith(pdu));

		// then
		assertNotNull(udh);
		assertEquals(47579, udh.multipartRef);
		assertEquals(1, udh.partNumber);
		assertEquals(2, udh.totalParts);
		assertEquals(0, udh.sentTimestamp);
	}

	@Test
	public void from_shouldDecodePdu_5() {
		// given
		byte[] pdu = { (byte) 0x07, (byte) 0x91, (byte) 0x44, (byte) 0x97, (byte) 0x37, (byte) 0x01, (byte) 0x90, (byte) 0x37, (byte) 0x64, (byte) 0x0C, (byte) 0x91, (byte) 0x44, (byte) 0x87, (byte) 0x09, (byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x00, (byte) 0x00, (byte) 0x90, (byte) 0x20, (byte) 0x11, (byte) 0x71, (byte) 0x85, (byte) 0x63, (byte) 0x00, (byte) 0x25, (byte) 0x06, (byte) 0x08, (byte) 0x04, (byte) 0xB9, (byte) 0xDB, (byte) 0x02, (byte) 0x02, (byte) 0xA0, (byte) 0x30, (byte) 0x3C, (byte) 0x2C, (byte) 0xA7, (byte) 0x83, (byte) 0xCC, (byte) 0xF2, (byte) 0x77, (byte) 0x1B, (byte) 0x44, (byte) 0x47, (byte) 0x97, (byte) 0x41, (byte) 0x6F, (byte) 0x79, (byte) 0xFA, (byte) 0x9C, (byte) 0x76, (byte) 0x87, (byte) 0xD9, (byte) 0xA0, (byte) 0xB7, (byte) 0xBB, (byte) 0x1C, (byte) 0x02 };

		// when
		SmsUdh udh = SmsUdh.from(anSmsWith(pdu));

		// then
		assertNotNull(udh);
		assertEquals(47579, udh.multipartRef);
		assertEquals(2, udh.partNumber);
		assertEquals(2, udh.totalParts);
		assertEquals(0, udh.sentTimestamp);
	}

	private static SmsMessage anSmsWith(byte[] pdu) {
		SmsMessage m = mock(SmsMessage.class);
		when(m.getPdu()).thenReturn(pdu);
		return m;
	}
}
